const { reviewDal } = require('../apis/dataAccessLayer/review.dataAccessLayer');
const {
	getHeadOfList,
	popHeadOfList,
} = require('../databases/redis.databases');
const { emailTypes } = require('./constants');
const { logError } = require('./errorLogger.utils');
const { generateAIResponse } = require('./openAIHandler.utils');
const { sendEmail } = require('./sendgridEmailHandler.utils');

// used in catch block log function because there are no arguments of this function and we can't afford to make an api call outside try block
let dataToLog = null;
const userProfileReviewHandler = async () => {
	try {
		const headOfListResponse = await getHeadOfList(
			process.env.REDIS_KEY_MESSAGE_LIST
		);

		const headOfList = headOfListResponse.data;

		if (!headOfList) {
			return;
		}

		const { reviewId, orderId } = JSON.parse(headOfList);
		dataToLog = { reviewId, orderId };

		if (!reviewId || !orderId) {
			throw new Error('Invalid reviewId or orderId');
		}

		const updatedReviewResponse = await reviewDal().addPaymentIdInReview(
			reviewId
		);

		const reviewDetails = updatedReviewResponse.data;

		// check if the review has already been generated by ai and saved
		if (reviewDetails.reviewDetails) {
			throw new Error('Review has already been generated and saved.');
		}

		if (
			!reviewDetails.images ||
			reviewDetails.images.length === 0 ||
			reviewDetails.images.length >
				Number(process.env.MAX_IMAGES_ALLOWED_PER_REVIEW)
		) {
			throw new Error('Invalid number of images.');
		}

		const imageFileNames = reviewDetails.images.map(
			(image) => image.imagePublicId + '.' + image.imageType
		);

		const aiResponse = await generateAIResponse(imageFileNames);

		const aiGeneratedReviewString = aiResponse.data;

		await reviewDal().saveAiReview(reviewId, aiGeneratedReviewString);

		await popHeadOfList(process.env.REDIS_KEY_MESSAGE_LIST);

		await sendEmail(emailTypes.reviewGenerationSuccessEmail_to_user, {
			userEmail: reviewDetails.userEmail,
			reviewPublicId: reviewDetails.reviewPublicId,
		});

		dataToLog = null;
	} catch (err) {
		logError(
			'UserProfileReviewHandlerError',
			err,
			'UserProfileReviewHandlerError',
			dataToLog
		);
	}
};

module.exports = { userProfileReviewHandler };
